#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define SCREEN_ADDRESS 0x3C // Change this to match your display's address

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define LED_PIN 7

// Example bitmap array (replace with your own bitmap data)
const unsigned char bitmap[] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 
0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 
0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x05, 0xff, 0xff, 
0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x01, 0xd8, 0xff, 0xff, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 
0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf9, 0xff, 0xff, 0xb0, 0x00, 0x00, 0x03, 0xff, 0xff, 
0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xbf, 0xff, 
0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xb9, 0x8f, 0xff, 0xfc, 0x00, 0x00, 0x03, 0xe7, 0xff, 
0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x07, 0xbd, 0xc6, 0xff, 0xff, 0x00, 0x00, 0x03, 0xfb, 0xff, 
0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xb9, 0xcc, 0xff, 0xff, 0x80, 0x00, 0x03, 0xff, 0xff, 
0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x99, 0xcc, 0xff, 0xff, 0xc0, 0x00, 0x03, 0xff, 0x7f, 
0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x99, 0xcc, 0xfe, 0xff, 0xe0, 0x00, 0x00, 0xff, 0xbf, 
0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xb9, 0xc8, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x6f, 0xff, 
0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xb8, 0xc8, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x01, 0x9f, 
0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x98, 0xc0, 0xff, 0xff, 0xa2, 0x00, 0x00, 0x00, 0x6f, 
0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x18, 0xc0, 0x7b, 0xff, 0xc7, 0x00, 0x00, 0x00, 0x17, 
0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x18, 0xc0, 0x70, 0xf3, 0xfd, 0x80, 0x00, 0x01, 0xcf, 
0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x18, 0x80, 0x61, 0x80, 0x7f, 0x80, 0x00, 0x00, 0xfb, 
0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x88, 0xc0, 0x40, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x7b, 
0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x08, 0x88, 0x00, 0x00, 0x05, 0xc0, 0x00, 0x00, 0x7d, 
0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x87, 0x08, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0xbd, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x18, 0x00, 0x03, 0xbe, 0x00, 0x00, 0x00, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x60, 0x00, 0x00, 0x07, 0x00, 0x00, 0x07, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x03, 0x1d, 0x00, 0x04, 0x07, 0xfe, 
0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x02, 0x07, 0xc0, 0x00, 0x11, 0x1e, 0x00, 0x80, 0x41, 0xfe, 
0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x02, 0x1e, 0x02, 0x00, 0x20, 0xde, 
0x00, 0x00, 0x04, 0x00, 0x3a, 0x00, 0x00, 0x01, 0xe0, 0x00, 0xb8, 0x08, 0x00, 0x00, 0x20, 0xfe, 
0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x04, 0x00, 0x17, 0x30, 0xbf, 
0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x07, 0x86, 0x00, 0x01, 0x84, 0x00, 0x1b, 0x20, 0xff, 
0x80, 0x00, 0x20, 0x00, 0x02, 0x00, 0x00, 0x07, 0xf7, 0xc0, 0x10, 0x3e, 0x02, 0x1c, 0x40, 0x7d, 
0x80, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x07, 0x5b, 0xff, 0x01, 0xfe, 0x0c, 0x18, 0x01, 0xbd, 
0x80, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x07, 0xef, 0xff, 0xff, 0xb7, 0x00, 0x10, 0x00, 0xfb, 
0xc0, 0x00, 0x10, 0x0a, 0x00, 0x00, 0x00, 0x0f, 0xc7, 0xff, 0xff, 0xfb, 0x08, 0x00, 0x00, 0x3b, 
0xc0, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x1f, 0xe1, 0xf0, 0x3f, 0x5d, 0x03, 0x00, 0x00, 0x07, 
0xe0, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x03, 0x80, 0x03, 0x00, 0x00, 0x07, 
0xf0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x04, 0x00, 0x00, 0x8f, 
0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x37, 0xff, 0xe0, 0x00, 0x3c, 0x00, 0x00, 0x1f, 
0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xbc, 0x7f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x1f, 
0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xdc, 0x5f, 0xff, 0xf9, 0x00, 0x00, 0x00, 0x00, 0x3f, 
0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x7c, 0x7f, 0xff, 0xf8, 0xd0, 0x00, 0x20, 0x00, 0x7f, 
0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x7f, 0xff, 0xb4, 0x80, 0x10, 0x20, 0x00, 0xff, 
0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x7f, 0xff, 0xec, 0x00, 0x0c, 0x00, 0x01, 0xff, 
0xff, 0xe0, 0x00, 0x00, 0x00, 0x01, 0x9b, 0xfc, 0x3f, 0xfd, 0xf4, 0x00, 0x00, 0x00, 0x07, 0xff, 
0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x18, 0x00, 0x00, 0x00, 0x0f, 0xff, 
0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 
0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0xf0, 0x08, 0x00, 0x00, 0x00, 0x7f, 0xff, 
0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x70, 0x10, 0x00, 0x00, 0x01, 0xff, 0xff, 
0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x37, 0x7f, 0xc0, 0x00, 0x00, 0x38, 0x07, 0xff, 0xff, 
0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xff, 0x80, 0x00, 0x00, 0xe0, 0x1f, 0xff, 0xff, 
0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x84, 0x00, 0x01, 0xf0, 0x7f, 0xff, 0xff, 
0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0e, 0xf8, 0x00, 0x06, 0xf3, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x06, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x7f, 0x8e, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x02, 0x00, 0x7e, 0x1f, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x08, 0x01, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x04, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

unsigned long displayStartMillis = 0;
unsigned long imageDisplayStartMillis = 0;
const unsigned long displayInterval = 10000; // Display image for 10 seconds
const unsigned long ledBlinkInterval = 500; // LED blink interval of 0.5 second

enum State {
  HAPPY_HANUMAN_JAYANTI,
  WAIT_FOR_JAI_SRI_RAM,
  DISPLAY_IMAGE,
  MANTRA_PROMPT
};

State currentState = HAPPY_HANUMAN_JAYANTI;
String userInputBuffer = "";
bool isLedOn = false; // Track LED state

void setup() {
  // Initialize serial communication
  Serial.begin(9600);

  // Initialize LED pin as output
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW); // Ensure LED is off initially

  // Initialize OLED display with I2C address 0x3C
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;); // Don't proceed, loop forever
  }

  display.display();
  delay(2000); // Pause for 2 seconds
}

void loop() {
  unsigned long currentMillis = millis();

  switch (currentState) {
    case HAPPY_HANUMAN_JAYANTI:
      if (currentMillis - displayStartMillis < 3000) { // Display "Happy Hanuman Jayanti" for 3 seconds
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(SSD1306_WHITE);
        display.setCursor(0, 0);
        display.println(F("--HANUMAN JAYANTHI--"));
        display.display();
        // Display "TYPE JAI SRI RAM"
        display.setTextSize(1);
        display.setCursor(0, 20);
        display.println(F("TYPE JAI SRI RAM"));
        display.println(F("\n    PROJECT BY \nVADEENDRA KARANAM"));
        display.display();
      } else {
        currentState = WAIT_FOR_JAI_SRI_RAM;
        displayStartMillis = currentMillis;
      }
      break;

    case WAIT_FOR_JAI_SRI_RAM:
      while (Serial.available() > 0) {
        char receivedChar = Serial.read();
        if (receivedChar == '\n') {
          if (userInputBuffer.equals("JAI SRI RAM") || userInputBuffer.equals("jai sri ram")) {
            currentState = DISPLAY_IMAGE;
            displayStartMillis = currentMillis;
            userInputBuffer = ""; // Clear the buffer for the next input
            break;
          } else {
            userInputBuffer = ""; // Clear the buffer if the input doesn't match
          }
        } else {
          userInputBuffer += receivedChar;
        }
      }
      break;

    case DISPLAY_IMAGE:
      if (currentMillis - displayStartMillis < displayInterval) { // Display image for 10 seconds
        digitalWrite(LED_PIN, isLedOn); // Set LED state
        // Toggle LED every 0.5 second
        if (currentMillis - imageDisplayStartMillis >= ledBlinkInterval) {
          isLedOn = !isLedOn; // Toggle LED state
          imageDisplayStartMillis = currentMillis; // Reset the timer
        }
        display.clearDisplay();
        display.drawBitmap(0, 0, bitmap, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
        display.display();
      } else {
        digitalWrite(LED_PIN, LOW); // Turn off LED
        currentState = MANTRA_PROMPT;
        displayStartMillis = currentMillis;
      }
      break;

    case MANTRA_PROMPT:
      if (currentMillis - displayStartMillis < 5000) { // Display prompt for 5 seconds
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(SSD1306_WHITE);
        display.setCursor(0, 0);
        display.println(F("        TYPE      "));
        display.println(F("\n1 for RAM MANTRA"));
        display.println(F("\n\n2 for HANUMAN\nKARYASIDDHI MANTRA"));
        display.display();
      } else {
        if (Serial.available() > 0) {
          char userInput = Serial.read();
          if (userInput == '1') {
            display.clearDisplay();
            display.setTextSize(1);
            display.setTextColor(SSD1306_WHITE);
            display.setCursor(0, 0);
            display.println(F("\n\nSRI RAMA RAMA RAMETI RAME RAME MANORAME|"));
            display.println(F("\n\nSAHASRANAMA TATTULYAM RAMA NAMA VARANANE||"));
            display.display();
          } else if (userInput == '2') {
            display.clearDisplay();
            display.setTextSize(1);
            display.setTextColor(SSD1306_WHITE);
            display.setCursor(0, 0);
            display.println(F("Tvamasmin Kaarya\nNiryoge Pramaanam\nHari Sattama|"));
            display.println(F("\nHanuman Yatnamastaya\nDukkha Kshaya\nKaro Bhava||"));
            display.display();
          }
        }
      }
      break;
  }
}